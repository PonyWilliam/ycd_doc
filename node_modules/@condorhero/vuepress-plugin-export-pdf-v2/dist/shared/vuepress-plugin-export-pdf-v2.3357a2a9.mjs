import { checkEnv, resolveUserConfigPath, resolveUserConfigConventionalPath, loadModule, timeTransformer, generatePdf, runCli, systemInfo } from '@condorhero/vuepress-plugin-export-pdf-core';
import { join } from 'node:path';
import { createRequire } from 'node:module';
import { loadUserConfig, resolveUserConfigConventionalPath as resolveUserConfigConventionalPath$1, createDevApp, viteBundler, defaultTheme, transformUserConfigToPlugin } from 'vuepress';
import debug from 'debug';

const name = "@condorhero/vuepress-plugin-export-pdf-v2";
const type = "module";
const version$1 = "3.0.2";
const description = "VuePress 2.x plugin exports a PDF 📁.";
const author = "CondorHero";
const license = "MIT";
const homepage = "https://github.com/condorheroblog/vuepress-plugin-export-pdf#readme";
const repository = {
	type: "git",
	url: "git+https://github.com/condorheroblog/vuepress-plugin-export-pdf.git",
	directory: "packages/vuepress-plugin-export-pdf-v2"
};
const bugs = {
	url: "https://github.com/condorheroblog/vuepress-plugin-export-pdf/issues"
};
const keywords = [
	"vuepress-plugin-export-pdf-v2",
	"vuepress-plugin-export-pdf",
	"vuepress-plugin",
	"vuepress",
	"plugin"
];
const exports = {
	".": {
		types: "./dist/index.d.ts",
		require: "./dist/index.cjs",
		"import": "./dist/index.mjs"
	}
};
const main = "dist/index.cjs";
const module = "dist/index.mjs";
const types = "dist/index.d.ts";
const typesVersions = {
	"*": {
		"*": [
			"./dist/*",
			"./dist/index.d.ts"
		]
	}
};
const bin = {
	"press-export-pdf": "bin/press-export-pdf.mjs"
};
const files = [
	"bin",
	"dist"
];
const engines = {
	node: ">=14"
};
const scripts = {
	build: "unbuild",
	prepublishOnly: "nr build",
	dev: "esno ./src/commands/press-export-pdf.ts export ./example/vuepress-next/docs"
};
const peerDependencies = {
	vuepress: ">=2.0.0-beta.49 <=2.x"
};
const dependencies = {
	"@condorhero/vuepress-plugin-export-pdf-core": "workspace:^",
	debug: "^4.3.4"
};
const devDependencies = {
	"@types/debug": "^4.1.8",
	vuepress: "^2.0.0-beta.61"
};
const publishConfig = {
	access: "public",
	registry: "https://registry.npmjs.org"
};
const pkg = {
	name: name,
	type: type,
	version: version$1,
	description: description,
	author: author,
	license: license,
	homepage: homepage,
	repository: repository,
	bugs: bugs,
	keywords: keywords,
	exports: exports,
	main: main,
	module: module,
	types: types,
	typesVersions: typesVersions,
	bin: bin,
	files: files,
	engines: engines,
	scripts: scripts,
	peerDependencies: peerDependencies,
	dependencies: dependencies,
	devDependencies: devDependencies,
	publishConfig: publishConfig
};

const devDebug = debug("vuepress-plugin-export-pdf-v2:dev-server");
const moduleRequire = createRequire(import.meta.url);
const { version } = moduleRequire("vuepress/package.json");
const serverApp = async (dir = "docs", commandOptions = {}) => {
  checkEnv("VuePress", pkg.engines.node, version, pkg.peerDependencies.vuepress);
  const sourceDir = join(process.cwd(), dir);
  if (commandOptions.debug)
    debug.enabled("vuepress-plugin-export-pdf-v2:*");
  devDebug("sourceDir: %s", sourceDir);
  let userConfig = {};
  const userConfigPath = commandOptions.config ? resolveUserConfigPath(commandOptions.config) : resolveUserConfigConventionalPath(sourceDir);
  if (userConfigPath)
    userConfig = await loadModule(userConfigPath);
  if (Array.isArray(userConfig.routePatterns))
    userConfig.routePatterns = ["/**", "!/404.html", ...userConfig.routePatterns];
  else
    userConfig.routePatterns = ["/**", "!/404.html"];
  const vuepressOutFile = commandOptions.outFile ?? `vuepress-${timeTransformer()}.pdf`;
  const vuepressOutDir = commandOptions.outDir ?? ".";
  devDebug("userConfig: %O", userConfig);
  const {
    theme,
    bundler,
    sorter,
    puppeteerLaunchOptions,
    pdfOptions,
    routePatterns,
    outFile = vuepressOutFile,
    outDir = vuepressOutDir,
    urlOrigin = commandOptions.urlOrigin,
    pdfOutlines = commandOptions.pdfOutlines,
    outlineContainerSelector
  } = userConfig;
  const { userConfig: vuePressConfig } = await loadUserConfig(resolveUserConfigConventionalPath$1(sourceDir));
  const devApp = createDevApp({
    source: sourceDir,
    ...vuePressConfig,
    bundler: bundler || vuePressConfig.bundler || viteBundler(),
    theme: theme || vuePressConfig.theme || defaultTheme(),
    host: "localhost",
    port: 8714
  });
  devApp.use(transformUserConfigToPlugin(userConfig, sourceDir));
  await devApp.init();
  await devApp.prepare();
  const closeDevServer = await devApp.dev();
  process.stdout.write("Start to generate current site to PDF ...");
  const { pages, options: { temp: tempPath } } = devApp;
  const hashPages = pages.map((page) => ({
    // join => /docs//zh/
    path: join(`${devApp.siteData.base}${page.path}`),
    key: page.key
  }));
  try {
    await generatePdf({
      pages: hashPages,
      tempDir: tempPath,
      port: devApp.options.port,
      host: devApp.options.host,
      outFile,
      outDir,
      sorter,
      urlOrigin,
      pdfOptions,
      pdfOutlines,
      routePatterns,
      puppeteerLaunchOptions,
      outlineContainerSelector
    });
  } catch (error) {
    console.error(error);
  }
  await closeDevServer();
  process.exit(0);
};

const registerCommands = (program) => {
  program.command("export [sourceDir]", "Export current VuePress site to a PDF file(default: docs)").allowUnknownOptions().option("-c, --config <config>", "Set path to config file").option("--outFile <outFile>", "Name of output file").option("--outDir <outDir>", "Directory of output files").option("--pdfOutlines <pdfOutlines>", "Keep PDF outlines/bookmarks").option("--urlOrigin <urlOrigin>", "Change the origin of the print url(Option displayHeaderFooter of pdfOptions is true)").option("--debug", "Enable debug mode").action(serverApp);
  program.command("info", "Display environment information").action(() => {
    systemInfo([
      "@vuepress/bundler-vite",
      "@vuepress/bundler-webpack",
      "@vuepress/cli",
      "@vuepress/client",
      "@vuepress/core",
      "@vuepress/markdown",
      "@vuepress/plugin-active-header-links",
      "@vuepress/plugin-back-to-top",
      "@vuepress/plugin-container",
      "@vuepress/plugin-debug",
      "@vuepress/plugin-docsearch",
      "@vuepress/plugin-git",
      "@vuepress/plugin-google-analytics",
      "@vuepress/plugin-medium-zoom",
      "@vuepress/plugin-nprogress",
      "@vuepress/plugin-palette",
      "@vuepress/plugin-prismjs",
      "@vuepress/plugin-pwa",
      "@vuepress/plugin-pwa-popup",
      "@vuepress/plugin-register-components",
      "@vuepress/plugin-search",
      "@vuepress/plugin-shiki",
      "@vuepress/plugin-theme-data",
      "@vuepress/plugin-toc",
      "@vuepress/shared",
      "@vuepress/theme-default",
      "@vuepress/utils",
      "vuepress",
      "vuepress-vite",
      "vue",
      "vue-router",
      "vue-loader"
    ]);
  });
};
runCli("press-export-pdf")(registerCommands);

export { moduleRequire as m, registerCommands as r, serverApp as s };
